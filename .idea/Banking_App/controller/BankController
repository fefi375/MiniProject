class BankController:
    def __init__(self):
        self.accounts = {}  # Stores accounts with account holder's name as the key
    
    def menu(self):
        """Displays the main menu for banking operations."""
        while True:
            print("\n--- Banking Menu ---")
            print("1. Create a new account")
            print("2. Deposit money")
            print("3. Withdraw money")
            print("4. Check balance")
            print("5. Exit")
            
            choice = input("Choose an option (1-5): ")
            
            if choice == '1':
                self.create_account()
            elif choice == '2':
                self.deposit_money()
            elif choice == '3':
                self.withdraw_money()
            elif choice == '4':
                self.check_balance()
            elif choice == '5':
                print("Exiting the banking app.")
                break
            else:
                print("Invalid option. Please choose a valid option.")
    
    def create_account(self):
        """Creates a new account and stores it in the accounts dictionary."""
        account = Account.create_account()
        account_holder = account.first_name + " " + account.last_name
        
        if account_holder in self.accounts:
            print("An account with this name already exists.")
        else:
            self.accounts[account_holder] = account
            print(f"Account for {account_holder} created successfully.")
    
    def deposit_money(self):
        """Deposits money into an existing account."""
        account_holder = input("Enter the account holder's name: ")
        if account_holder in self.accounts:
            try:
                amount = float(input("Enter the amount to deposit: "))
                self.accounts[account_holder].deposit(amount)
                print(f"${amount:.2f} deposited successfully.")
            except ValueError:
                print("Invalid amount. Please enter a numeric value.")
        else:
            print("Account not found.")
    
    def withdraw_money(self):
        """Withdraws money from an existing account if the pin code is correct."""
        account_holder = input("Enter the account holder's name: ")
        if account_holder in self.accounts:
            pin_code = input("Enter your 4-digit pin code: ")
            try:
                amount = float(input("Enter the amount to withdraw: "))
                self.accounts[account_holder].withdraw(amount, pin_code)
                print(f"${amount:.2f} withdrawn successfully.")
            except ValueError as e:
                print(e)
        else:
            print("Account not found.")
    
    def check_balance(self):
        """Checks the balance of an existing account if the pin code is correct."""
        account_holder = input("Enter the account holder's name: ")
        if account_holder in self.accounts:
            pin_code = input("Enter your 4-digit pin code: ")
            try:
                balance = self.accounts[account_holder].get_balance(pin_code)
                print(f"Current balance: ${balance:.2f}")
            except ValueError as e:
                print(e)
        else:
            print("Account not found.")

# Create a BankController instance and start the menu
if __name__ == "__main__":
    bank_controller = BankController()
    bank_controller.menu()